AWSTemplateFormatVersion: '2010-09-09'
Description: This stack will create single farget ecs cluster
Parameters:
  EnvironmentParameter:
    Description: Select the type of environment to create.
    Type: String
    Default: Staging
    AllowedValues: [ Staging, Production ]

  VPC:
    Description: Enter VPC Name
    Type: AWS::EC2::VPC::Id

  # ECS Cluster
  ClusterName:
    Description: Enter the ECS Cluster Name (Any)
    Type: String
    Default: ''

  # Task Defination
  TaskCpu:
    Description: 'Enter the CPU Power'
    Type: String
    AllowedValues: [ 256, 512, 1024, 2048, 4096]

  TaskMemory:
    Description: 'Enter the Memory Size'
    Type: String
    AllowedValues: [ 0.5GB, 1GB, 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB, 9GB, 10GB, 11GB, 12GB, 13GB, 14GB, 15GB,
       16GB, 17GB, 18GB, 19GB, 20GB, 21GB, 22GB, 23GB, 24GB, 25GB, 26GB, 27GB, 28GB, 29GB, 30GB ]
  # RunCommand:
  #   Description: 'Enter the command to run for ex. $ bundle exec sidekiq'
  #   Type: String

  TaskDefinitionFamilyName:
    Description: Enter the TaskDefinitionFamilyName (Any)
    Type: String
    Default: ''
  ContainerName:
    Description: Enter the container name (Any)
    Type: String
    Default: ''
  Image:
    Description: Enter the our Image name URI
    Type: String
    Default: ''

  PublicSubnetOne:
    Description: Select Public Subnet 1 Name
    Type: AWS::EC2::Subnet::Id
  PublicSubnetTwo:
    Description: Select Public Subnet 2 Name
    Type: AWS::EC2::Subnet::Id
  LoadBalancerSecurityGroupID:
    Description: Select the LoadBalancer Security GroupID to apply to the Applicaion Load Balancer
    Type: AWS::EC2::SecurityGroup::Id
  
  LoadBalancerPort:
    Type: Number
    Default: 443

  ContainerPort:
    Description: Enter the cotainer/app port Our Image is nginx image so that's why here we use nginx default port. we can redirct prot from 80 to 3000 using LoadBalancer
    Type: Number
    Default: 3000

  HTTPPort:
    Type: Number
    Default: 80

  ACMCertificateARN:
    Type: String
    Description: Eneter the our ACM Certificatio ARN
    Default: ''

  # Target Group
  TargetGroupName:
    Description: Enter the name of target group (Any)
    Type: String
    Default: ''

  # ECS Service
  ECSServiceName:
    Description: Enter the ECS Service Name (Any)
    Type: String
    Default: ''

  PublicSubnetOne:
    Description: Select Private Subnet 1 Name
    Type: AWS::EC2::Subnet::Id

  PublicSubnetTwo:
    Description: Select Private Subnet 2 Name
    Type: AWS::EC2::Subnet::Id

  ContainerSecurityGroup:
    Description: Select the Container Security GroupID to Create ECS Service
    Type: AWS::EC2::SecurityGroup::Id

  ContainerName:
    Description: Enter the container name which we entered while creating task defination stack
    Type: String
    Default: ''

  MinContainers:
    Type: Number
    Default: 1

  MaxContainers:
    Type: Number
    Default: 2

  AutoScalingCPUPolicyName:
    Description: Enter The Policy name (Any)
    Type: String
    Default: ''

  AutoScalingMemoryPolicyName:
    Description: Enter The Policy name (Any)
    Type: String
    Default: ''

  AutoScalingCPUTargetValue:
    Type: Number
    Default: 70

  AutoScalingMemoryTargetValue:
    Type: Number
    Default: 50

  EnvironmentValue:
    Type: String
    Description: Enter the ARN of Secret Manager here.
    Default: ""

Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  # ECS Task Role 
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Path: /
      Policies:
        - PolicyName: TCGAmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
              Action:
                - ses:SendEmail
                - 's3:*'
              Effect: Allow
              Resource: '*'
              # Resource: 'arn:aws:s3:::my-task-secrets-bucket/*'
          PolicyName: TCGAmazonECSTaskRolePolicy
  # ECS Task Excution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: TCGAmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 's3:*'
              Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: TCGAttechSecretToECSRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ssm:GetParameters'
                - 'secretsmanager:GetSecretValue'
                - 'kms:Decrypt'
              Resource: 
                - 'arn:aws:secretsmanager:ap-southeast-1:845847047647:secret:tcg-backend-prod-ScPxVM'
                - 'arn:aws:kms:ap-southeast-1:845847047647:key/e17b6597-bcd8-4c6c-9980-87294866fb8d'
              
  
  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref TaskDefinitionFamilyName
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !Ref Image
          Secrets:
            - Name: tcg-backend-prod
              ValueFrom: !Ref EnvironmentValue
          PortMappings:
          # hostport is only allow when we use ECS not it's not support Farget
            # - hostPort: '0'
            - ContainerPort: !Ref ContainerPort
              protocol: tcp
          essential: true
          # HealthCheck:
          #   Command: [ "CMD-SHELL", "curl -f http://localhost:3000/ || exit 1" ]
          #   Interval: "30"
          #   Retries: "3"
          #   Timeout: "5"
          # In this env we can set simple env blow which we can show here.
          # Environment:
          #   - Name: database-user-name-here
          #     Value: postgres
          # EnvironmentFiles:
          #   - Type: s3
          #     Value: !Ref EnvironmentFile
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Join [ '/', [ '/ecs' , !Ref TaskDefinitionFamilyName ] ]
              awslogs-stream-prefix: ecs
          # secrets:
          #   name: tcg-backend-prod
          #   valueFrom: !Ref EnvironmentValue
  
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '/', [ '/ecs' , !Ref TaskDefinitionFamilyName ] ]
      RetentionInDays: 14

  #Load Balancer
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      IpAddressType: ipv4
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      # Note here we will mention our security group stack name along with SecurityGroupID
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroupID

  PublicLoadBalancerListenerHTTP:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
     DefaultActions:
       - Type: "redirect"
         RedirectConfig:
           Protocol: "HTTPS"
           Port: !Ref LoadBalancerPort
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"
     LoadBalancerArn: !Ref PublicLoadBalancer
     Port: !Ref HTTPPort
     Protocol: "HTTP"

  PublicLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      SslPolicy: "ELBSecurityPolicy-2016-08"
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: !Ref LoadBalancerPort
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref ACMCertificateARN

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: PublicLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      # If our health check gives us an error of 404 then we have to add http code 200, 404
      # Matcher:
      #   HttpCode: '200','404'
      Name: !Ref TargetGroupName
      # Port: !Ref LoadBalancerPort
      Port: !Ref HTTPPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - PublicLoadBalancerListenerHTTPS
    Properties: 
      Name: !Ref ECSServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      # Default deployment configuration: for this example we?ll use the default deployment configuration, which allows a maximum of 2 tasks (200% of the service?s desired count) and a minimum of 1 task (100% of the desired count). This means during deployment a new task will be created before the old one is terminated.
      # Here we put 200 in max tab and 100 in min tab so when we deploy our new changes then minimum 1 container is available we don't get down time it's call rolling update.
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      # For blue green deployment uncomment below two lines
      # For blue/green we will use DeploymentController Type CODE_DEPLOY
      # DeploymentController:
      #   Type: CODE_DEPLOY
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          # AssignPublicIp: DISABLED
          Subnets:
            # - !Ref PrivateSubnetOne
            # - !Ref PrivateSubnetTwo
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
  # AutoScalling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      # ResourceId: service/MyServiceCluster/ecs-service-with-alb-Service-Iv5PDNnmpmsz
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Ref AutoScalingCPUPolicyName
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref AutoScalingCPUTargetValue
  AutoScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Ref AutoScalingMemoryPolicyName
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization 
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingMemoryTargetValue

Outputs:
  ClusterName:
    Value: !Ref Cluster
    Description: Cluster Name
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ClusterArn:
    Value: !GetAtt Cluster.Arn
    Description: Cluster ARN
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'

  # ECS Task Role && ECS Task Excution Role
  ECSTaskRole:
    Value: !GetAtt 'ECSTaskRole.Arn'
    
  ECSTaskExecutionRole:
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'

  TaskDefinition:
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinition'

  # LoadBalancer
  PublicLoadBalancerDNS:
    Value: !GetAtt PublicLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-PublicLoadBalancerDNS'

  PublicLoadBalancer:
    Value: !Ref PublicLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-PublicLoadBalancer'

  TargetGroup:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-TargetGroup'

  # ECS-Service
  Service:
    Value: !Ref Service
    Export:
      Name: !Sub '${AWS::StackName}-ServiceArn'

  AutoScalingRole:
    Value: !Ref AutoScalingRole
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingRoleArn'

  AutoScalingTarget:
    Value: !Ref AutoScalingTarget
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingTargetArn'

  AutoScalingPolicyCPU:
    Value: !Ref AutoScalingPolicyCPU
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingPolicyCPUArn'

  AutoScalingPolicyMemory:
    Value: !Ref AutoScalingPolicyMemory
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingPolicyMemoryArn'