---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template deploy VPC, Amazon Elastic Container Service
  (Amazon ECS) using clusters powered by AWS Fargate and EC2, LB and sample services.

Parameters:

  EETeamRoleArn:
    Type: String
    Default: "YourIsengardArn"
    Description: The Arn to be assumed by Workshop participants.

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
  
  PublicSubnet1CIDR: 
    Type: String
    Default: 10.0.0.0/24
    Description: CidrBlock for public subnet 01 within the VPC  
  
  PublicSubnet2CIDR: 
    Type: String
    Default: 10.0.1.0/24
    Description: CidrBlock for public subnet 02 within the VPC  
  
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CidrBlock for private subnet 01 within the VPC  
  
  PrivateSubnet2CIDR: 
    Type: String
    Default: 10.0.3.0/24  
    Description: CidrBlock for private subnet 02 within the VPC  
    
  LaunchType:
    Type: String
    Default: Fargate
    AllowedValues:
      - Fargate
      - EC2
    Description: >
      The launch type for your service. Selecting EC2 will create an Auto
      Scaling group of m5.large instances for your cluster. See
      https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html
      to learn more about launch types.

  InstanceType:
    Type: String
    Default: m5.large

  LatestECSOptimizedAMI:
    Description: ECS AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Conditions:
  EC2: !Equals [ !Ref LaunchType, "EC2" ]
  Fargate: !Equals [ !Ref LaunchType, "Fargate" ]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      LaunchType:
        default: "Launch Type"
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - LaunchType
      - Label:
          default: Stack Configuration
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}'
        
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Network
        Value: Public
      - Key: Name
        Value: PublicSubnetA 
          
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: PublicSubnetB
      - Key: Network
        Value: Public
        
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: PrivateSubnetA 
      - Key: Network
        Value: Private
       
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: PrivateSubnetB 
      - Key: Network
        Value: Private
      
  PrivateNatA:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
            Fn::GetAtt:
            - NatGatewayEIP1
            - AllocationId
        SubnetId:
            Ref: PublicSubnet1
        Tags:
        - Key: Name
          Value: PrivateNatAGateway

  NatGatewayEIP1:
      DependsOn: AttachGateway
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

  PrivateRoute01:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
            Ref: PrivateRouteTable01
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
            Ref: PrivateNatA

  PrivateRouteTable01:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable01

  PrivateNatB:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
            Fn::GetAtt:
            - NatGatewayEIP2
            - AllocationId
        SubnetId:
            Ref: PublicSubnet2
        Tags:
        - Key: Name
          Value: PrivateNatBGateway

  NatGatewayEIP2:
      DependsOn: AttachGateway
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

  PrivateRouteTable02:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable02

  PrivateRoute02:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
            Ref: PrivateRouteTable02
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
            Ref: PrivateNatB

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable02

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Network
        Value: Public

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Network
        Value: Public
      - Key: Name
        Value: PublicRouteTable    

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  LBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECSTroubleshooting-alb
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443            

  ECSInstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for the instances"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: -1
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443            

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for the service"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: -1
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443            

  EC2Role:
    Type: AWS::IAM::Role
    # Condition: EC2
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    # Condition: EC2
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  Cloud9Environment:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: Amazon ECS Troubleshooting Immersion Day
      InstanceType: c5.large
      AutomaticStopTimeMinutes: 60
      SubnetId: !Ref PublicSubnet1
      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
      OwnerArn: !Join
        - ":"
        - - arn
          - !Ref AWS::Partition
          - sts
          - ""
          - !Select [4, !Split [":", !Ref EETeamRoleArn]]
          - !Join
            - "/"
            - - assumed-role
              - !Select [
                  1,
                  !Split ["/", !Select [5, !Split [":", !Ref EETeamRoleArn]]],
                ]
              - eoalola-Isengard    

  Cloud9InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ec2.${AWS::URLSuffix}
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Cloud9InstanceRole

  Cloud9RoleAttacherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:AssociateIamInstanceProfile
                  - ec2:DisassociateIamInstanceProfile
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt Cloud9InstanceRole.Arn
          PolicyName: UpdateEC2InstanceProfile

  Cloud9RoleAttacherFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt Cloud9RoleAttacherRole.Arn
      Runtime: python3.9
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json

          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return

              try:
                  client = boto3.client('ec2')
                  response = client.describe_instances(
                      Filters=[{
                          'Name': 'tag:aws:cloud9:environment',
                          'Values': [
                              event['ResourceProperties']['Cloud9EnvironmentId']
                          ]
                      }]
                  )
                  instance = response['Reservations'][0]['Instances'][0]
                  instance_id = instance['InstanceId']
                  security_group_id = instance['NetworkInterfaces'][0]['Groups'][0]['GroupId']
                  print('Instance ID: ' + instance_id);
                  print('Security Group ID: ' + security_group_id);

                  response = client.describe_iam_instance_profile_associations(
                      Filters=[{
                          'Name': 'instance-id',
                          'Values': [instance_id]
                      }]
                  )
                  associations = response['IamInstanceProfileAssociations']
                  if len(associations) == 1:
                      association_id = associations[0]['AssociationId']
                      response = client.disassociate_iam_instance_profile(
                        AssociationId=association_id
                      )
                  client.associate_iam_instance_profile(
                      IamInstanceProfile={
                        'Arn': event['ResourceProperties']['InstanceProfileArn']
                      },
                      InstanceId=instance_id
                  )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'SecurityGroupId': security_group_id
                  })
              except Exception as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  Cloud9RoleAttacherCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt Cloud9RoleAttacherFunction.Arn
      Cloud9EnvironmentId: !Ref Cloud9Environment
      InstanceProfileArn: !GetAtt Cloud9InstanceProfile.Arn

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSTroubleshooting
      Configuration:
        ExecuteCommandConfiguration:
            Logging: DEFAULT   
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: purpose
          Value: troubleshooting               

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    # Condition: EC2
    Properties:
      VPCZoneIdentifier: 
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2 
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '2'
      Tags: 
        - Key: Name
          Value: ECSTroubleshooting
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    # Condition: EC2
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${Cluster} > /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref LatestECSOptimizedAMI
      InstanceType: m5.large
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref ECSInstancesSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup

  RoleForECS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AWSAppMeshPreviewEnvoyAccess
        - arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess
      Policies:
        - PolicyName: sensitive-secret-ecs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: '*'   
              - Effect: Allow
                Action: 'kms:Decrypt'
                Resource: '*'                   

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 14

  TestSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: some-token
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "test-user"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Tags:
        -
          Key: Purpose
          Value: ECS Troubleshooting Workshop

  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: fargate-simple-app
      RequiresCompatibilities:
        - "FARGATE"
      Memory: 3 GB
      Cpu: 1 vCPU
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: simple-app
          Image: amazon/amazon-ecs-sample
          EntryPoint:
            - /usr/sbin/apache2
            - -D
            - FOREGROUND
          Essential: true
          LinuxParameters: 
            InitProcessEnabled: true          
          Memory: 512
          MountPoints:
            - SourceVolume: my-vol
              ContainerPath: /var/www/my-vol
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: simple-app
        - Name: busybox
          Image: busybox
          EntryPoint:
            - sh
            - -c
          Essential: true
          Memory: 256
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: busybox        
          Environment:
            - Name: 'PROJECT'
              Value: "ECS TROUBLESHOOTING"     
          VolumesFrom:
            - SourceContainer: simple-app
          Command:
            - /bin/sh -c "while true; do /bin/date > /var/www/my-vol/date; echo $PROJECT > /var/www/my-vol/variable.txt; sleep 600; done"
      Volumes:
        - Name: my-vol

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      ServiceName: sample-service-fg
      DesiredCount: 2
      TaskDefinition: !Ref FargateTaskDefinition
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
          Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2

  EC2TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: TestSecret
    Properties:
      Family: ec2-simple-app-new
      RequiresCompatibilities:
        - "EC2"
      NetworkMode: "bridge"
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: simple-app-ec2
          Image: amazon/amazon-ecs-sample
          EntryPoint:
            - /usr/sbin/apache2
            - -D
            - FOREGROUND
          Essential: true
          LinuxParameters: 
            InitProcessEnabled: true
          Memory: 512
          MountPoints:
            - SourceVolume: my-vol
              ContainerPath: /var/www/my-vol
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ec2-simple-app
        - Name: busybox-ec2
          Image: busybox
          EntryPoint:
            - sh
            - -c
          Essential: true
          Memory: 256
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: busybox-ec2        
          Environment:
            - Name: 'PROJECT'
              Value: "ECS TROUBLESHOOTING"
          Secrets:
            - Name: 'some_token'
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:some-token'          
          VolumesFrom:
            - SourceContainer: simple-app-ec2
          Command:
            - /bin/sh -c "while true; do /bin/date > /var/www/my-vol/date; echo $PROJECT > /var/www/my-vol/variable.txt; sleep 600; done"
      Volumes:
        - Name: my-vol

  EC2Service:
    Type: AWS::ECS::Service
    DependsOn: AutoScalingGroup
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 2
      ServiceName: sample-service-ec2
      Role: !Ref RoleForECS      
      EnableExecuteCommand: true      
      TaskDefinition: !Ref EC2TaskDefinition
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: simple-app-ec2
          ContainerPort: 80
          TargetGroupArn: !Ref EC2ServiceTargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2        
      SecurityGroups:
        - !Ref LBSecurityGroup

  EC2ServiceLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2ServiceTargetGroup

  EC2ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: instance
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  EC2ServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref EC2ServiceLoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref EC2ServiceTargetGroup
          Type: forward

  # FargateServiceLoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Subnets: 
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2        
  #     SecurityGroups:
  #       - !Ref LBSecurityGroup

  # FargateServiceLoadBalancerListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   DependsOn: FargateServiceLoadBalancer    
  #   Properties:
  #     LoadBalancerArn: !Ref FargateServiceLoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref FargateServiceTargetGroup

  # FargateServiceTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   DependsOn: FargateServiceLoadBalancer
  #   Properties:
  #     VpcId: !Ref VPC
  #     Port: 80
  #     Protocol: HTTP
  #     Matcher:
  #       HttpCode: 200-299
  #     HealthCheckIntervalSeconds: 10
  #     HealthCheckPath: /
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     TargetType: "ip"
  #     TargetGroupAttributes:
  #       - Key: deregistration_delay.timeout_seconds
  #         Value: 30

  # ListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     ListenerArn: !Ref FargateServiceLoadBalancerListener
  #     Priority: 1
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #           - /
  #     Actions:
  #       - TargetGroupArn: !Ref FargateServiceTargetGroup
  #         Type: forward

Outputs:

  ClusterName:
      Value: !Ref Cluster

  Subnets:
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]

  VpcId:
    Value: !Ref VPC

  PublicSubnets:
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]

  PrivateSubnets:
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]

  EC2ServiceUrl:
    Description: URL of the load balancer for the sample service deployed to EC2.
    Value: !Sub http://${LoadBalancer.DNSName}